const fs = require("fs");
const path = require("path");

// Fun√ß√£o para buscar dados da API do Tarkov.dev
async function fetchFromAPI(query) {
  try {
    const response = await fetch("https://api.tarkov.dev/graphql", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ query }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Erro ao buscar da API:", error);
    return null;
  }
}

// Fun√ß√£o para buscar m√≥dulos de uma esta√ß√£o espec√≠fica
async function getStationModules(stationName) {
  const query = `
    query {
      hideoutModules(module: "${stationName}") {
        id
        module
        level
        require {
          type
          name
          quantity
        }
      }
    }
  `;

  const result = await fetchFromAPI(query);
  return result?.data?.hideoutModules || [];
}

// Fun√ß√£o para buscar todos os m√≥dulos de todas as esta√ß√µes
async function getAllStationModules() {
  console.log("üîç Buscando m√≥dulos de todas as esta√ß√µes...\n");

  // Lista de todas as esta√ß√µes que queremos verificar
  const allStations = [
    "Generator",
    "Air Filtering Unit",
    "Bitcoin Farm",
    "Booze Generator",
    "Heating",
    "Illumination",
    "Lavatory",
    "Library",
    "Medstation",
    "Nutrition Unit",
    "Rest Space",
    "Scav Case",
    "Security",
    "Shooting Range",
    "Solar Power",
    "Stash",
    "Vents",
    "Water Collector",
    "Workbench",
    "Intelligence Center",
    "Hall of Fame",
    "Defective Wall",
    "Weapon Rack",
    "Gear Rack",
    "Cultist Circle",
    "Gym",
  ];

  const results = {};
  let totalModules = 0;

  for (const stationName of allStations) {
    console.log(`üì° Buscando m√≥dulos para: ${stationName}`);

    const modules = await getStationModules(stationName);
    results[stationName] = modules;

    if (modules.length > 0) {
      console.log(`  ‚úÖ Encontrados ${modules.length} m√≥dulos`);
      totalModules += modules.length;

      // Mostrar detalhes dos m√≥dulos
      modules.forEach((module) => {
        const reqCount = module.require?.length || 0;
        console.log(`    üìã N√≠vel ${module.level}: ${reqCount} requisitos`);
      });
    } else {
      console.log(`  ‚ùå Sem m√≥dulos (esta√ß√£o vazia)`);
    }

    // Aguardar um pouco para n√£o sobrecarregar a API
    await new Promise((resolve) => setTimeout(resolve, 1000));
  }

  console.log(`\nüìä RESUMO:`);
  console.log(`  üèóÔ∏è  Total de esta√ß√µes verificadas: ${allStations.length}`);
  console.log(`  üìã Total de m√≥dulos encontrados: ${totalModules}`);

  // Salvar resultados em arquivo
  const outputPath = path.join(
    __dirname,
    "../public/data/station-modules.json"
  );
  fs.writeFileSync(outputPath, JSON.stringify(results, null, 2));

  console.log(`\nüíæ Resultados salvos em: ${outputPath}`);

  // Mostrar esta√ß√µes com mais m√≥dulos
  console.log("\nüèÜ ESTA√á√ïES COM MAIS M√ìDULOS:");
  const stationStats = Object.entries(results)
    .map(([name, modules]) => ({ name, moduleCount: modules.length }))
    .sort((a, b) => b.moduleCount - a.moduleCount)
    .filter((station) => station.moduleCount > 0);

  stationStats.forEach((station, index) => {
    console.log(
      `  ${index + 1}. ${station.name}: ${station.moduleCount} m√≥dulos`
    );
  });

  return results;
}

// Fun√ß√£o para integrar os m√≥dulos ao arquivo hideout.json
async function integrateModulesToHideout() {
  console.log("\nüîó Integrando m√≥dulos ao arquivo hideout.json...\n");

  // Carregar arquivo hideout.json atual
  const hideoutPath = path.join(__dirname, "../public/data/hideout.json");
  const hideoutData = JSON.parse(fs.readFileSync(hideoutPath, "utf8"));

  // Carregar m√≥dulos da API
  const modulesPath = path.join(
    __dirname,
    "../public/data/station-modules.json"
  );
  if (!fs.existsSync(modulesPath)) {
    console.log(
      "‚ùå Arquivo de m√≥dulos n√£o encontrado. Execute primeiro getAllStationModules()"
    );
    return;
  }

  const apiModules = JSON.parse(fs.readFileSync(modulesPath, "utf8"));

  // Atualizar cada esta√ß√£o com seus m√≥dulos
  let updatedStations = 0;

  hideoutData.stations.forEach((station) => {
    const stationName = station.locales.en;
    const apiModulesForStation = apiModules[stationName];

    if (apiModulesForStation && apiModulesForStation.length > 0) {
      console.log(
        `üìã Atualizando ${stationName} com ${apiModulesForStation.length} m√≥dulos`
      );

      // Mapear requisitos da API para o formato do nosso sistema
      const mapRequirements = (requirements) => {
        return requirements.map((req) => {
          if (req.type === "item") {
            return { type: "item", itemId: req.name, quantity: req.quantity };
          }
          if (req.type === "module") {
            return { type: "module", module: req.name, level: req.quantity };
          }
          if (req.type === "trader") {
            return { type: "trader", traderId: req.name, level: req.quantity };
          }
          if (req.type === "skill") {
            return { type: "skill", skill: req.name, level: req.quantity };
          }
          return req;
        });
      };

      // Atualizar n√≠veis da esta√ß√£o
      station.levels = apiModulesForStation.map((module) => ({
        level: module.level,
        requirements: mapRequirements(module.require || []),
      }));

      updatedStations++;
    }
  });

  // Salvar arquivo atualizado
  const outputPath = path.join(
    __dirname,
    "../public/data/hideout-with-modules.json"
  );
  fs.writeFileSync(outputPath, JSON.stringify(hideoutData, null, 2));

  console.log(`\n‚úÖ Integra√ß√£o conclu√≠da!`);
  console.log(`üìÅ Arquivo salvo em: ${outputPath}`);
  console.log(`üèóÔ∏è  Esta√ß√µes atualizadas: ${updatedStations}`);
}

// Executar fun√ß√µes
if (require.main === module) {
  (async () => {
    try {
      // Primeiro buscar todos os m√≥dulos
      await getAllStationModules();

      // Depois integrar ao arquivo hideout.json
      await integrateModulesToHideout();

      console.log(
        "\nüéâ Processo completo! Todas as esta√ß√µes foram atualizadas com seus m√≥dulos."
      );
    } catch (error) {
      console.error("‚ùå Erro durante o processo:", error);
    }
  })();
}

module.exports = { getAllStationModules, integrateModulesToHideout };
